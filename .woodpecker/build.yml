depends_on:
  - lint


steps:
  build:
    image: debian:stable-slim
    commands:
      - apt update ; apt install -y --no-install-recommends ca-certificates git make podman
      - git clone https://github.com/liv-io/woodpecker.git ; cd ./woodpecker/
      - git checkout ${CI_COMMIT_BRANCH}
      - echo "write variable"
      - CONTAINERS=$(git --no-pager diff --name-only HEAD~1 * | sort -u | awk 'BEGIN {FS="/"} {print $1}' | uniq)
      - echo "print variable"
      - echo "$${CONTAINERS}"
      - echo "build changed containers"
      - for container in "$${CONTAINERS}" ; do make build container=$${container} ; done
      - echo "done"

#when:
#  - event: [pull_request, tag]
#  - event: push
#    branch:
#      - ${CI_REPO_DEFAULT_BRANCH}
#      - release/*

#when:
#  - event: [pull_request, tag]
#  - event: push
#    branch:
#      - ${CI_REPO_DEFAULT_BRANCH}
#      - release/*
#      - renovate/*

#when:
#  - event: tag
#  - event: pull_request
#  - event: push
#    path: &when_path
#      - 'docs/**'
#      - '.woodpecker/docs.yml'
#      # since we generate docs for cli tool we have to watch this too
#      - 'cli/**'
#      - 'cmd/cli/**'
#      # api docs
#      - 'server/api/**'
#    branch:
#      - ${CI_REPO_DEFAULT_BRANCH}
#      - renovate/*
#  - event: pull_request_closed
#    path: *when_path
#  - cron: update_docs
#    event: cron
#  - event: manual
#    evaluate: 'TASK == "docs"'

#variables:
#  - &golang_image 'docker.io/golang:1.21.5'
#  - &node_image 'docker.io/node:21-alpine'
#  - &xgo_image 'docker.io/techknowlogick/xgo:go-1.21.5'
#  - &xgo_version 'go-1.21.2'
#  - &buildx_plugin 'docker.io/woodpeckerci/plugin-docker-buildx:2.2.1'
#  - &platforms_release 'linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/386,linux/amd64,linux/ppc64le,linux/riscv64,linux/s390x,freebsd/arm64,freebsd/amd64,openbsd/arm64,openbsd/amd64'
#  - &platforms_server 'linux/arm/v7,linux/arm64/v8,linux/amd64,linux/ppc64le,linux/riscv64'
#  - &platforms_preview 'linux/amd64'
#  - &platforms_alpine 'linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64,linux/ppc64le'
#  - &build_args 'CI_COMMIT_SHA=${CI_COMMIT_SHA},CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH},CI_COMMIT_TAG=${CI_COMMIT_TAG}'

#variables:
#  - &node_image 'docker.io/node:21-alpine'
#  - &when
#    path:
#      # related config files
#      - '.woodpecker/web.yml'
#      # web source code
#      - 'web/**'
#      # api source code
#      - 'server/api/**'
#    event: [pull_request, tag, deployment]
#
#steps:
#  install_dependencies:
#    image: *node_image
#    directory: web/
#    commands:
#      - corepack enable
#      - pnpm install --frozen-lockfile
#    when: *when
#
#  lint:
#    depends_on:
#      - install_dependencies
#    image: *node_image
#    directory: web/
#    commands:
#      - corepack enable
#      - pnpm lint
#    when: *when
#
#  formatcheck:
#    depends_on:
#      - install_dependencies
#    image: *node_image
#    directory: web/
#    commands:
#      - corepack enable
#      - pnpm format:check
#    when: *when
#
#  typecheck:
#    depends_on:
#      - install_dependencies
#    image: *node_image
#    directory: web/
#    commands:
#      - corepack enable
#      - pnpm typecheck
#    when: *when
#
#  test:
#    depends_on:
#      - install_dependencies
#    image: *node_image
#    directory: web/
#    commands:
#      - corepack enable
#      - pnpm test
#    when: *when

#  build-cli:
#    image: *golang_image
#    commands:
#      - make docs
#    when:
#      - path: *when_path
#      - event: [cron, manual]
#
#  build:
#    image: *node_image
#    directory: docs/
#    commands:
#      - corepack enable
#      - pnpm install --frozen-lockfile
#      - pnpm build
#    when:
#      - path: *when_path
#      - event: [cron, manual]
#
#  deploy-preview:
#    image: docker.io/woodpeckerci/plugin-surge-preview:1.3.0
#    settings:
#      path: 'docs/build/'
#      surge_token:
#        from_secret: SURGE_TOKEN
#      forge_repo_token:
#        from_secret: GITHUB_TOKEN_SURGE
#    failure: ignore
#    when:
#      event: [pull_request, pull_request_closed]
#      path: *when_path
#
#  deploy:
#    image: docker.io/alpine:3.19
#    secrets:
#      - BOT_PRIVATE_KEY
#    commands:
#      - apk add openssh-client git rsync jq
#      - mkdir -p $HOME/.ssh
#      - ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts
#      - echo "$BOT_PRIVATE_KEY" > $HOME/.ssh/id_rsa
#      - chmod 0600 $HOME/.ssh/id_rsa
#      - git config --global user.email "woodpecker-bot@obermui.de"
#      - git config --global user.name "woodpecker-bot"
#      - git clone --depth 1 --single-branch git@github.com:woodpecker-ci/woodpecker-ci.github.io.git /repo
#      # update latest and next version
#      - if [[ "$CI_PIPELINE_EVENT" == "tag" && "${CI_COMMIT_TAG}" != *"rc"* ]] ; then jq '.latest = "${CI_COMMIT_TAG}"' /repo/version.json > /repo/version.json.tmp && mv /repo/version.json.tmp /repo/version.json ; fi
#      - if [[ "$CI_PIPELINE_EVENT" == "tag" ]] ; then jq '.rc = "${CI_COMMIT_TAG}"' /repo/version.json > /repo/version.json.tmp && mv /repo/version.json.tmp /repo/version.json ; fi
#      - if [ "$CI_PIPELINE_EVENT" == "push" ] ; then jq '.next = "next-${CI_COMMIT_SHA:0:10}"' /repo/version.json > /repo/version.json.tmp && mv /repo/version.json.tmp /repo/version.json ; fi
#      # copy all docs files and delete all old ones, but leave CNAME and index.yaml untouched
#      - rsync -r --exclude .git --exclude CNAME --exclude index.yaml --exclude README.md --exclude version.json --delete docs/build/ /repo
#      - cd /repo
#      - git add .
#      # exit successfully if nothing changed
#      - test -n "$(git status --porcelain)" || exit 0
#      - git commit -m "Deploy website - based on ${CI_COMMIT_SHA}"
#      - git push
#    when:
#      - event: push
#        path: *when_path
#        branch: ${CI_REPO_DEFAULT_BRANCH}
#      - event: [cron, manual, tag]
